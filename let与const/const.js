// const声明一个只读的常量。一旦声明，常量的值就不能改变。

// const PI = 3.1415;
// PI // 3.1415

// PI = 3;
// // 报错

// 由上可知，const 声明的常量是无法修改的。

// const 也拥有作用域，使用方法与 let 相同

// const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。

// 所以我们可以对 const 声明的 对象 或者 数组 中 可执行操作
// const foo = {};

// // 为 foo 添加一个属性，可以成功
// foo.prop = 123;
// foo.prop // 123

// // 将 foo 指向另一个对象，就会报错
// foo = {}; // TypeError: "foo" is read-only

// 如果真的想将对象冻结，应该使用Object.freeze方法。

// const foo = Object.freeze({});

// // 常规模式时，下面一行不起作用；
// // 严格模式时，该行会报错
// foo.prop = 123;